
CREATE VIEW dw.vw_dim_customer AS SELECT dc.customer_key, dc.customer_id, dc.soldto_number, dc.shipto_number, dc.soldto_name, dc.shipto_name, COALESCE(restate.base_customer, dc.base_customer) AS base_customer, COALESCE(restate.base_customer_desc, dc.base_customer_desc) AS base_customer_desc, COALESCE(restate.level01_bar, dc.level01_bar) AS level01_bar, COALESCE(restate.level02_bar, dc.level02_bar) AS level02_bar, COALESCE(restate.level03_bar, dc.level03_bar) AS level03_bar, COALESCE(restate.level04_bar, dc.level04_bar) AS level04_bar, COALESCE(restate.level05_bar, dc.level05_bar) AS level05_bar, COALESCE(restate.level06_bar, dc.level06_bar) AS level06_bar, COALESCE(restate.level07_bar, dc.level07_bar) AS level07_bar, COALESCE(restate.level08_bar, dc.level08_bar) AS level08_bar, COALESCE(restate.level09_bar, dc.level09_bar) AS level09_bar, COALESCE(restate.level10_bar, dc.level10_bar) AS level10_bar, COALESCE(restate.level11_bar, dc.level11_bar) AS level11_bar, dc.membertype, dc.generation, dc.ragged_level01_bar, dc.ragged_level02_bar, dc.ragged_level03_bar, dc.ragged_level04_bar, dc.ragged_level05_bar, dc.ragged_level06_bar, dc.ragged_level07_bar, dc.ragged_level08_bar, dc.ragged_level09_bar, dc.ragged_level10_bar, dc.ragged_level11_bar, COALESCE(restate.demand_group, dc.demand_group) AS demand_group, COALESCE(restate.a2, dc.a2) AS a2, COALESCE(restate.a1, dc.a1) AS a1, COALESCE(restate.a2_desc, dc.a2_desc) AS a2_desc, COALESCE(restate.a1_desc, dc.a1_desc) AS a1_desc, dc.start_date, dc.end_date, dc.audit_loadts, COALESCE(restate.level01_commercial, dc.level01_commercial) AS level01_commercial, COALESCE(restate.level02_commercial, dc.level02_commercial) AS level02_commercial, COALESCE(restate.level03_commercial, dc.level03_commercial) AS level03_commercial, COALESCE(restate.level04_commercial, dc.level04_commercial) AS level04_commercial, COALESCE(restate.level05_commercial, dc.level05_commercial) AS level05_commercial, COALESCE(restate.level06_commercial, dc.level06_commercial) AS level06_commercial, dc.hierarchy_b_id, dc.hierarchy_b_desc, COALESCE(restate.hierarchy_c_id, dc.hierarchy_c_id) AS hierarchy_c_id, COALESCE(restate.hierarchy_c_desc, dc.hierarchy_c_desc) AS hierarchy_c_desc, CASE WHEN (restate.soldto_number IS NULL) THEN 'N'::text ELSE 'Y'::text END AS flg_restated FROM (dw.dim_customer dc LEFT JOIN dw.dim_customer_restatement restate ON (((lower((dc.soldto_number)::text) = lower((restate.soldto_number)::text)) AND (lower((dc.base_customer)::text) = lower((restate.base_customer)::text)))));

CREATE VIEW dw.vw_dim_dataprocessing_rule AS SELECT dim_dataprocessing_rule.data_processing_ruleid, dim_dataprocessing_rule.dataprocessing_group, dim_dataprocessing_rule.dataprocessing_rule_description FROM dw.dim_dataprocessing_rule;

CREATE VIEW dw.vw_dim_product AS SELECT dp.product_key, dp.product_id, upper((dp.material)::text) AS material, dp.bar_product, upper((dp.sku)::text) AS sku, COALESCE(brand_map.brand_map, 'unknown'::character varying) AS product_brand, COALESCE(dm.portfolio, dp.portfolio, 'unknown'::character varying) AS portfolio, COALESCE(dm.portfolio_desc, dp.portfolio_desc, 'unknown'::character varying) AS portfolio_desc, COALESCE(dm.member_type, dp.member_type, 'Base'::character varying) AS member_type, COALESCE(dm.generation, dp.generation, 9) AS generation, COALESCE(dm.level01_bar, dp.level01_bar, 'unknown'::character varying) AS level01_bar, COALESCE(dm.level02_bar, dp.level02_bar, 'unknown'::character varying) AS level02_bar, COALESCE(dm.level03_bar, dp.level03_bar, 'unknown'::character varying) AS level03_bar, COALESCE(dm.level04_bar, dp.level04_bar, 'unknown'::character varying) AS level04_bar, COALESCE(dm.level05_bar, dp.level05_bar, 'unknown'::character varying) AS level05_bar, COALESCE(dm.level06_bar, dp.level06_bar, 'unknown'::character varying) AS level06_bar, COALESCE(dm.level07_bar, dp.level07_bar, 'unknown'::character varying) AS level07_bar, COALESCE(dm.level08_bar, dp.level08_bar, 'unknown'::character varying) AS level08_bar, COALESCE(dm.level09_bar, dp.level09_bar, 'unknown'::character varying) AS level09_bar, dp.start_date, dp.end_date, dp.audit_loadts, dp.gpp_division_code, dp.prd_comm_level01_gts, dp.prd_comm_level02_super_bu, dp.prd_comm_level04_category AS prd_comm_level03_category, dp.prd_comm_level03_subcategory AS prd_comm_level04_subcategory, dp.prd_comm_level05_gpp_portfolio, CASE WHEN (regexp_instr((dp.material)::text, '^[0-9]{18}'::text) = 1) THEN ((dp.material)::bigint)::character varying(30) ELSE dp.material END AS material_disp FROM ((dw.dim_product dp LEFT JOIN dw.dim_product_restatement dm ON (((lower((dp.material)::text) = lower((dm.material)::text)) AND (lower((dp.bar_product)::text) = lower((dm.bar_product)::text))))) LEFT JOIN ref_data.sku_brand_mapping_masterdata brand_map ON ((lower((brand_map.material)::text) = lower((dp.material)::text))));

CREATE VIEW dw.vw_fact_pnl_commercial_orig AS SELECT f.org_tranagg_id, f.posting_week_enddate, f.fiscal_month_id, f.bar_currtype, f.amt, f.amt_usd, f.tran_volume, f.sales_volume, f.uom FROM (dw.fact_pnl_commercial_orig f CROSS JOIN (SELECT (dd.wk_begin_dte - (1)::bigint) AS current_posting_weekend_date FROM dw.dim_date dd WHERE (dd.dy_dte = ((getdate())::date)::timestamp without time zone)) derived_table1) WHERE (f.posting_week_enddate <= derived_table1.current_posting_weekend_date);

CREATE VIEW dw.vw_fact_pnl_commercial_stacked AS SELECT f.fact_pnl_commercial_stacked_id, f.org_tranagg_id, f.org_dataprocessing_ruleid, f.mapped_dataprocessing_ruleid, f.dataprocessing_outcome_key, f.bar_acct, f.bar_currtype, f.posting_week_enddate, f.fiscal_month_id, f.scenario_id, f.source_system_id, f.business_unit_key, f.customer_key, f.product_key, f.org_bar_custno, f.org_bar_product, f.org_bar_brand, f.mapped_bar_custno, f.mapped_bar_product, f.mapped_bar_brand, f.org_soldtocust, f.org_shiptocust, f.org_material, f.alloc_soldtocust, f.alloc_shiptocust, f.alloc_material, f.alloc_bar_product, f.allocated_flag, f.amt, f.amt_usd, f.tran_volume, f.sales_volume, f.uom, f.dim_transactional_attributes_id FROM (dw.fact_pnl_commercial_stacked f CROSS JOIN (SELECT (dd.wk_begin_dte - (1)::bigint) AS current_posting_weekend_date FROM dw.dim_date dd WHERE (dd.dy_dte = ((getdate())::date)::timestamp without time zone)) derived_table1) WHERE (f.posting_week_enddate <= derived_table1.current_posting_weekend_date);

CREATE VIEW dw.vw_fact_pnl_ocos_stacked AS SELECT f.fact_pnl_ocos_stacked_id, f.org_tranagg_id, f.dataprocessing_ruleid, f.dataprocessing_outcome_key, f.bar_acct, f.bar_currtype, f.posting_week_enddate, f.fiscal_month_id, f.scenario_id, f.source_system_id, f.business_unit_key, f.customer_key, f.product_key, f.soldtocust, f.shiptocust, f.bar_custno, f.cost_pool, f.super_sbu, f.material, f.bar_product, f.bar_brand, f.amt, f.amt_usd, f.tran_volume, f.sales_volume, f.uom, 1 AS allocated_flag FROM dw.fact_pnl_ocos_stacked f;
